// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskAPI.DataAccess;

#nullable disable

namespace TaskAPI.DataAccess.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    [Migration("20230316181119_Added data annotations")]
    partial class Addeddataannotations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Crud.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2023, 3, 16, 23, 41, 19, 526, DateTimeKind.Local).AddTicks(4524),
                            Description = "get some text book for school",
                            Due = new DateTime(2023, 3, 21, 23, 41, 19, 526, DateTimeKind.Local).AddTicks(4538),
                            Status = 0,
                            Title = "Get books from school"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CreatedAt = new DateTime(2023, 3, 16, 23, 41, 19, 526, DateTimeKind.Local).AddTicks(4544),
                            Description = "get some text book for school 2",
                            Due = new DateTime(2023, 3, 21, 23, 41, 19, 526, DateTimeKind.Local).AddTicks(4545),
                            Status = 0,
                            Title = "Get books from school 2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            CreatedAt = new DateTime(2023, 3, 16, 23, 41, 19, 526, DateTimeKind.Local).AddTicks(4546),
                            Description = "get some text book for school 3",
                            Due = new DateTime(2023, 3, 21, 23, 41, 19, 526, DateTimeKind.Local).AddTicks(4547),
                            Status = 0,
                            Title = "Get books from school 3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CreatedAt = new DateTime(2023, 3, 16, 23, 41, 19, 526, DateTimeKind.Local).AddTicks(4548),
                            Description = "get some text book for school 4",
                            Due = new DateTime(2023, 3, 21, 23, 41, 19, 526, DateTimeKind.Local).AddTicks(4548),
                            Status = 0,
                            Title = "Get books from school 4"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressNo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressNo = "45",
                            City = "nuwara",
                            FullName = "Bawantha Thilan",
                            Street = "street1"
                        },
                        new
                        {
                            Id = 2,
                            AddressNo = "45",
                            City = "nuwara",
                            FullName = "John Doe",
                            Street = "street2"
                        },
                        new
                        {
                            Id = 3,
                            AddressNo = "45",
                            City = "nuwara",
                            FullName = "John Carm",
                            Street = "street3"
                        },
                        new
                        {
                            Id = 4,
                            AddressNo = "45",
                            City = "nuwara",
                            FullName = "Garfield",
                            Street = "street4"
                        });
                });

            modelBuilder.Entity("Crud.Models.Todo", b =>
                {
                    b.HasOne("TaskAPI.Models.Author", "Author")
                        .WithMany("todos")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TaskAPI.Models.Author", b =>
                {
                    b.Navigation("todos");
                });
#pragma warning restore 612, 618
        }
    }
}
